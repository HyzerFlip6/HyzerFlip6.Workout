<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gym Workout Tracker</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Import the Inter font for a clean, modern look */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117; /* Fallback for browsers that don't support image */
            color: #c9d1d9; /* Light gray text for readability */
            background-image: url('https://storage.googleapis.com/gcs-sandbox-uploade-storage/image_9ec2f0.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed; /* Ensures the background stays put on scroll */
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        /* Custom scrollbar styling for a cleaner look */
        body::-webkit-scrollbar {
            width: 8px;
        }
        body::-webkit-scrollbar-track {
            background: #21262d;
        }
        body::-webkit-scrollbar-thumb {
            background-color: #30363d;
            border-radius: 4px;
        }
        body::-webkit-scrollbar-thumb:hover {
            background-color: #484f58;
        }
        
        /* Frosted glass effect on cards */
        .frosted-card {
            backdrop-filter: blur(20px) saturate(200%);
            -webkit-backdrop-filter: blur(20px) saturate(200%);
            background-color: rgba(255, 255, 255, 0.05); /* Lighter, more transparent background */
            border: 1px solid rgba(255, 255, 255, 0.1); /* Subtle white border */
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
        }

        /* Consistent green accent for all cards */
        .card-green {
            border-left: 5px solid #22c55e; /* Green accent for all cards */
        }
        .text-green-accent {
            color: #22c55e; /* Match accent color for text */
        }
        
        /* Custom styles for the submit button with frosted effect */
        .submit-button {
            /* Frosted glass effect */
            backdrop-filter: blur(20px) saturate(200%);
            -webkit-backdrop-filter: blur(20px) saturate(200%);
            background-color: rgba(0, 188, 212, 0.4); /* Teal color with 40% opacity */
            color: white;
            transition: all 0.3s ease-in-out;
        }
        .submit-button:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 188, 212, 0.4);
        }
        .submit-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Custom modal styles */
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #161b22;
            padding: 30px;
            border-radius: 12px;
            border: 1px solid #30363d;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            max-width: 400px;
            width: 90%;
            text-align: center;
        }
        .close-button {
            color: #c9d1d9;
            float: right;
            font-size: 28px;
            font-weight: bold;
            line-height: 1;
        }
        .close-button:hover,
        .close-button:focus {
            color: #22c55e;
            text-decoration: none;
            cursor: pointer;
        }

        /* New styles for the workout bubbles with frosted effect */
        .workout-bubble {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            border-radius: 9999px; /* full rounded */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 100%; /* Ensure they are responsive */
            
            /* Frosted glass effect */
            backdrop-filter: blur(20px) saturate(200%);
            -webkit-backdrop-filter: blur(20px) saturate(200%);
        }

        /* Define specific colors for each type */
        .bubble-1rm {
            background-color: rgba(59, 130, 246, 0.6); /* Blue */
        }
        .bubble-10rm {
            background-color: rgba(34, 197, 94, 0.6); /* Green */
        }
        .bubble-current {
            background-color: rgba(0, 188, 212, 0.4); /* Teal with 40% opacity */
        }
        .bubble-pb {
            background-color: #3b82f6; /* Light Blue */
        }
    </style>
</head>
<body class="bg-[#0d1117] min-h-screen p-4 sm:p-8 text-[#c9d1d9]">

    <div class="container mx-auto p-4 sm:p-8 bg-[#161b22] shadow-2xl rounded-3xl">
        <h1 class="text-3xl sm:text-4xl font-bold text-center text-[#c9d1d9] mb-2">
            Gym Workout Tracker
        </h1>
        <p class="text-center text-[#8b949e] mb-8 max-w-lg mx-auto">
            Track your progress and celebrate your gains with your partner!
        </p>

        <!-- User ID & Connection Status -->
        <div class="frosted-card p-4 rounded-xl shadow-inner mb-8">
            <div class="flex flex-col sm:flex-row items-center justify-between">
                <span class="text-sm font-medium text-[#8b949e] mb-2 sm:mb-0">Your User ID:</span>
                <!-- The new location for the Initial dropdown -->
                <select id="initial" required class="w-24 px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                    <option value="">Select Initial</option>
                    <option value="J">J</option>
                    <option value="H">H</option>
                    <option value="J & H">J & H</option>
                </select>
            </div>
            <div class="mt-4 text-center">
                <span id="loadingStatus" class="text-sm text-[#8b949e] font-medium">Connecting...</span>
            </div>
            
            <!-- New section for User Info, hidden by default -->
            <div id="userInfoSection" class="mt-6 hidden">
                <div class="border-t border-[#30363d] pt-4">
                    <h3 class="text-lg font-bold text-[#c9d1d9] mb-4">Your Health Info</h3>
                    <form id="userInfoForm" class="space-y-4">
                        <div>
                            <label for="userWeight" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Weight (kg)</label>
                            <input type="number" id="userWeight" placeholder="e.g., 75" step="0.1" required
                                class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                        </div>
                        <div>
                            <label for="userHeight" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Height (cm)</label>
                            <input type="number" id="userHeight" placeholder="e.g., 180" step="0.1" required
                                class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                        </div>
                        <div class="mt-4">
                            <span class="block text-sm font-semibold text-[#c9d1d9] mb-1">BMI:</span>
                            <span id="bmiResult" class="text-xl font-bold text-green-accent">--</span>
                        </div>
                        <div class="text-center mt-6">
                             <button type="submit"
                                class="px-8 py-3 bg-blue-600 text-white font-semibold rounded-full shadow-lg hover:bg-blue-700 transform hover:scale-105 transition duration-300 ease-in-out">
                                Save Info
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Add/Edit Workout Form -->
        <form id="achievementForm" class="frosted-card p-6 rounded-2xl shadow-lg mb-12">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="bodyPart" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Body Part</label>
                    <select id="bodyPart" required class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                        <option value="">Select body part</option>
                        <option value="Legs">Legs</option>
                        <option value="Chest">Chest</option>
                        <option value="Triceps">Triceps</option>
                        <option value="Shoulders">Shoulders</option>
                        <option value="Back">Back</option>
                        <option value="Biceps">Biceps</option>
                        <option value="Abs">Abs</option>
                        <option value="Cardio">Cardio</option>
                    </select>
                </div>
            </div>
            <div class="mt-4">
                <label for="achievementName" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Workout Title</label>
                <select id="achievementName" required class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                    <option value="">Select or add a workout</option>
                </select>
                <input type="text" id="newAchievementNameInput" placeholder="Enter new workout title" style="display:none;"
                       class="w-full mt-2 px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
            </div>

            <!-- Combined Input Section for Weight/Reps/Time and Type -->
            <div class="mt-6 border-t border-[#30363d] pt-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label for="achievementType" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Workout Type</label>
                        <select id="achievementType" required class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                            <option value="">Select type</option>
                            <option value="1rm">One Rep Max</option>
                            <option value="10rm">10 Rep Max</option>
                            <option value="current">Current Workout</option>
                        </select>
                    </div>
                    <div>
                        <label for="workoutData" class="block text-sm font-semibold text-[#c9d1d9] mb-1">Weight / Time</label>
                        <input type="text" id="workoutData" placeholder="e.g., 225kg" required
                           class="w-full px-4 py-2 border border-[#30363d] rounded-lg focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] transition bg-[#161b22] text-[#c9d1d9]">
                    </div>
                </div>
            </div>

            <div class="mt-8 text-center flex justify-center space-x-4">
                <button type="submit"
                        class="px-10 py-4 submit-button font-semibold rounded-full shadow-lg"
                        id="submitButton">
                    Add Workout
                </button>
                <button type="button"
                        class="px-10 py-4 bg-gray-600 text-white font-semibold rounded-full shadow-lg hover:bg-gray-700 transform hover:scale-105 transition duration-300 ease-in-out hidden"
                        id="cancelButton">
                    Cancel
                </button>
            </div>
        </form>

        <!-- Filter & Workout List Header -->
        <div class="flex flex-col sm:flex-row items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-[#c9d1d9] mb-4 sm:mb-0">Workouts</h2>
            <!-- New separate filter dropdowns -->
            <div class="flex items-center space-x-2 flex-wrap">
                <span class="text-sm text-[#8b949e]">Filter by:</span>
                <select id="initialsFilter" class="p-2 border border-[#30363d] rounded-lg text-sm bg-[#161b22] text-[#c9d1d9] focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e] mb-2 sm:mb-0">
                    <option value="all">All Workouts</option>
                    <option value="J">J's Workouts</option>
                    <option value="H">H's Workouts</option>
                    <option value="J & H">J & H's Workouts</option>
                </select>
                <select id="bodyPartFilter" class="p-2 border border-[#30363d] rounded-lg text-sm bg-[#161b22] text-[#c9d1d9] focus:ring-2 focus:ring-[#22c55e] focus:border-[#22c55e]">
                    <option value="all">All Body Parts</option>
                    <option value="Legs">Legs</option>
                    <option value="Chest">Chest</option>
                    <option value="Triceps">Triceps</option>
                    <option value="Shoulders">Shoulders</option>
                    <option value="Back">Back</option>
                    <option value="Biceps">Biceps</option>
                    <option value="Abs">Abs</option>
                    <option value="Cardio">Cardio</option>
                </select>
                <button id="clearFiltersButton" class="px-4 py-2 text-sm bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition">
                    Clear
                </button>
            </div>
        </div>

        <!-- Workout List -->
        <div id="achievementList" class="space-y-6">
            <!-- Workouts will be dynamically inserted here -->
            <div class="text-center text-[#8b949e] p-8" id="emptyState">
                No workouts yet. Add your first one!
            </div>
        </div>
    </div>

    <!-- Custom Modal for Alerts/Confirmation -->
    <div id="alertModal" class="modal hidden">
        <div class="modal-content frosted-card p-6 rounded-2xl">
            <span class="close-button">&times;</span>
            <p id="alertMessage" class="text-lg text-[#c9d1d9] font-semibold mb-4"></p>
            <div id="modalButtons" class="flex justify-center space-x-4">
                <button id="modalConfirmBtn" class="bg-blue-600 text-white px-6 py-2 rounded-full hover:bg-blue-700 transition hidden">Confirm</button>
                <button id="modalCancelBtn" class="bg-gray-600 text-white px-6 py-2 rounded-full hover:bg-gray-700 transition">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, deleteDoc, doc, getDoc, updateDoc, where, getDocs, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // HTML elements
        const initialSelect = document.getElementById('initial');
        const loadingStatusSpan = document.getElementById('loadingStatus');
        const achievementForm = document.getElementById('achievementForm');
        const achievementList = document.getElementById('achievementList');
        const submitButton = document.getElementById('submitButton');
        const emptyState = document.getElementById('emptyState');
        const initialsFilter = document.getElementById('initialsFilter');
        const bodyPartFilter = document.getElementById('bodyPartFilter');
        const bodyPartSelect = document.getElementById('bodyPart');
        const achievementNameSelect = document.getElementById('achievementName');
        const newAchievementNameInput = document.getElementById('newAchievementNameInput');
        const workoutDataInput = document.getElementById('workoutData');
        const cancelButton = document.getElementById('cancelButton');
        const clearFiltersButton = document.getElementById('clearFiltersButton');
        const achievementTypeSelect = document.getElementById('achievementType');
        
        // New user info elements
        const userInfoSection = document.getElementById('userInfoSection');
        const userInfoForm = document.getElementById('userInfoForm');
        const userWeightInput = document.getElementById('userWeight');
        const userHeightInput = document.getElementById('userHeight');
        const bmiResultSpan = document.getElementById('bmiResult');

        const alertModal = document.getElementById('alertModal');
        const alertMessage = document.getElementById('alertMessage');
        const modalConfirmBtn = document.getElementById('modalConfirmBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');
        const modalCloseBtn = document.querySelector('.close-button');

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        let currentUser = null;
        let isAuthReady = false;
        let allAchievements = [];
        let allUserProfiles = [];
        let currentInitialFilter = 'all';
        let currentBodyPartFilter = 'all';
        let selectedInitial = '';
        let editingDocId = null;
        let isCardio = false;

        // --- AUTHENTICATION & INITIALIZATION ---
        // Sign in user and set up auth listener
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                console.log('User authenticated:', user.uid);
                currentUser = user;
                loadingStatusSpan.textContent = "Connected and ready!";
                loadingStatusSpan.classList.remove('text-red-500');
                loadingStatusSpan.classList.add('text-green-500');
                submitButton.disabled = false;
                isAuthReady = true;

                // Seed the database if it's empty
                await seedInitialData();

                // Listen for real-time achievements and user profiles
                listenForAchievements();
                listenForUserProfiles();
            } else {
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Authentication failed:", error);
                    loadingStatusSpan.textContent = "Authentication failed. Please try reloading.";
                    loadingStatusSpan.classList.remove('text-green-500');
                    loadingStatusSpan.classList.add('text-red-500');
                    submitButton.disabled = true;
                }
            }
        });

        // Function to seed the database with initial workout data and user profiles if no data exists
        const seedInitialData = async () => {
            if (!isAuthReady) return;
            const workoutsCollectionPath = `artifacts/${appId}/public/data/gym-achievements`;
            const userProfilesCollectionPath = `artifacts/${appId}/public/data/user-profiles`;

            const workoutsQuerySnapshot = await getDocs(collection(db, workoutsCollectionPath));
            const userProfilesQuerySnapshot = await getDocs(collection(db, userProfilesCollectionPath));

            if (workoutsQuerySnapshot.empty || userProfilesQuerySnapshot.empty) {
                console.log("No initial data found, seeding the database...");

                const workouts = [
                    // Legs Workouts
                    { name: 'Leg Press', initial: 'J', bodyPart: 'Legs', type: '1rm', workoutData: '200kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 5 },
                    { name: 'Leg Press', initial: 'H', bodyPart: 'Legs', type: '1rm', workoutData: '450kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 5 },
                    { name: 'Leg Press', initial: 'J', bodyPart: 'Legs', type: '10rm', workoutData: '180kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 4 },
                    { name: 'Leg Press', initial: 'H', bodyPart: 'Legs', type: '10rm', workoutData: '340kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 4 },
                    { name: 'Single Leg Press', initial: 'J', bodyPart: 'Legs', type: 'current', workoutData: '65kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 3 },
                    { name: 'Single Leg Press', initial: 'H', bodyPart: 'Legs', type: 'current', workoutData: '100kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 3 },
                    { name: 'Hip Thrust', initial: 'J', bodyPart: 'Legs', type: '10rm', workoutData: '60kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 2 },
                    { name: 'Hip Thrust', initial: 'H', bodyPart: 'Legs', type: '10rm', workoutData: '70kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 24 * 2 },
                    { name: 'Leg Extension', initial: 'J', bodyPart: 'Legs', type: '10rm', workoutData: '40kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 24 },
                    { name: 'Leg Extension', initial: 'H', bodyPart: 'Legs', type: '10rm', workoutData: '75kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 24 },
                    { name: 'Hamstring Curl', initial: 'J', bodyPart: 'Legs', type: '10rm', workoutData: '27.5kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Hamstring Curl', initial: 'H', bodyPart: 'Legs', type: '10rm', workoutData: '55.5kg', userId: 'seed-user-h', timestamp: Date.now() },
                    { name: 'Seated Leg Curl', initial: 'J', bodyPart: 'Legs', type: '10rm', workoutData: '40kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Seated Leg Curl', initial: 'H', bodyPart: 'Legs', type: '10rm', workoutData: '75kg', userId: 'seed-user-h', timestamp: Date.now() },

                    // Chest Workouts
                    { name: 'Bench Press', initial: 'J', bodyPart: 'Chest', type: '1rm', workoutData: '30kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 3 },
                    { name: 'Bench Press', initial: 'H', bodyPart: 'Chest', type: '1rm', workoutData: '115kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 3 },
                    { name: 'Bench Press', initial: 'J', bodyPart: 'Chest', type: '10rm', workoutData: '25kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 * 2 },
                    { name: 'Bench Press', initial: 'H', bodyPart: 'Chest', type: '10rm', workoutData: '85kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 * 2 },
                    { name: 'Bench Press', initial: 'J', bodyPart: 'Chest', type: 'current', workoutData: '22.5kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 },
                    { name: 'Bench Press', initial: 'H', bodyPart: 'Chest', type: 'current', workoutData: '80kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 },
                    { name: 'Incline Bench', initial: 'J', bodyPart: 'Chest', type: '10rm', workoutData: '7kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Incline Bench', initial: 'H', bodyPart: 'Chest', type: '10rm', workoutData: '30kg', userId: 'seed-user-h', timestamp: Date.now() },
                    { name: 'Chest Fly', initial: 'J', bodyPart: 'Chest', type: '10rm', workoutData: '25kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Chest Fly', initial: 'H', bodyPart: 'Chest', type: '10rm', workoutData: '86kg', userId: 'seed-user-h', timestamp: Date.now() },

                    // Triceps Workouts
                    { name: 'Assisted Dips', initial: 'J', bodyPart: 'Triceps', type: '10rm', workoutData: '47kg assisted', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 15 },
                    { name: 'Assisted Dips', initial: 'H', bodyPart: 'Triceps', type: '10rm', workoutData: 'bodyweight (0kg)', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 15 },

                    // Shoulders Workouts
                    { name: 'Shoulder Press', initial: 'J', bodyPart: 'Shoulders', type: '10rm', workoutData: '7kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Shoulder Press', initial: 'H', bodyPart: 'Shoulders', type: '10rm', workoutData: '25kg', userId: 'seed-user-h', timestamp: Date.now() },

                    // Back Workouts
                    { name: 'Lat Pulldowns', initial: 'J', bodyPart: 'Back', type: '10rm', workoutData: '25kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Lat Pulldowns', initial: 'H', bodyPart: 'Back', type: '10rm', workoutData: '40kg', userId: 'seed-user-h', timestamp: Date.now() },
                    { name: 'Pull Ups', initial: 'J', bodyPart: 'Back', type: '10rm', workoutData: '36kg assisted', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Pull Ups', initial: 'H', bodyPart: 'Back', type: '10rm', workoutData: '8 reps', userId: 'seed-user-h', timestamp: Date.now() },
                    
                    // Biceps Workouts
                    { name: 'Preacher Curl', initial: 'J', bodyPart: 'Biceps', type: '10rm', workoutData: '17.5kg', userId: 'seed-user-j', timestamp: Date.now() },
                    { name: 'Preacher Curl', initial: 'H', bodyPart: 'Biceps', type: '10rm', workoutData: '45kg', userId: 'seed-user-h', timestamp: Date.now() },
                    { name: 'Bicep Curl', initial: 'J', bodyPart: 'Biceps', type: '10rm', workoutData: '6kg', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 60 },
                    { name: 'Bicep Curl', initial: 'H', bodyPart: 'Biceps', type: '10rm', workoutData: '15kg', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 60 },
                    
                    // Abs Workouts
                    { name: 'Sit Up Passes', initial: 'J & H', bodyPart: 'Abs', type: 'current', workoutData: '31 passes with 4kg', userId: 'seed-user-combined', timestamp: Date.now() - 1000 * 60 * 30 },

                    // Cardio Workouts
                    { name: '5km Run', initial: 'J', bodyPart: 'Cardio', type: 'pb', workoutData: '34min 34sec', userId: 'seed-user-j', timestamp: Date.now() - 1000 * 60 * 10 },
                    { name: '5km Run', initial: 'H', bodyPart: 'Cardio', type: 'pb', workoutData: '25min 45sec', userId: 'seed-user-h', timestamp: Date.now() - 1000 * 60 * 10 }
                ];

                const userProfiles = [
                    { initial: 'J', weight: 80, height: 180, userId: 'seed-user-j', timestamp: Date.now() },
                    { initial: 'H', weight: 85, height: 185, userId: 'seed-user-h', timestamp: Date.now() }
                ];
                
                // Add each workout to Firestore
                for (const workout of workouts) {
                    try {
                        await addDoc(collection(db, workoutsCollectionPath), workout);
                    } catch (e) {
                        console.error("Error adding seeded document: ", e);
                    }
                }
                
                // Add initial user profiles to Firestore
                for (const profile of userProfiles) {
                    try {
                        await setDoc(doc(db, userProfilesCollectionPath, profile.initial), profile);
                    } catch (e) {
                        console.error("Error adding seeded user profile: ", e);
                    }
                }
            } else {
                console.log("Database is not empty, skipping seeding.");
            }
        };

        // --- DATA MANAGEMENT & RENDERING ---
        // Function to listen for real-time data updates
        const listenForAchievements = () => {
            if (!isAuthReady) {
                console.log('Auth not ready, skipping listenForAchievements');
                return;
            }
            console.log('Firebase ready, listening for data...');
            
            const collectionPath = `artifacts/${appId}/public/data/gym-achievements`;
            const q = query(collection(db, collectionPath));
            
            onSnapshot(q, (querySnapshot) => {
                console.log('onSnapshot triggered. Documents:', querySnapshot.docs.length);
                allAchievements = [];
                querySnapshot.forEach((doc) => {
                    const data = doc.data();
                    allAchievements.push({ id: doc.id, ...data });
                });
                
                // Sort achievements alphabetically by name
                allAchievements.sort((a, b) => a.name.localeCompare(b.name));
                
                // Update the achievement name dropdown
                const selectedBodyPart = bodyPartSelect.value;
                updateAchievementNameDropdown(selectedBodyPart);
                
                // Update the workout type dropdown based on selected body part
                updateWorkoutTypeDropdown(selectedBodyPart);

                // Re-render achievements with the current filters
                filterAndRenderAchievements();
            }, (error) => {
                console.error("Failed to fetch workouts:", error);
                loadingStatusSpan.textContent = "Failed to load workouts. Check console for details.";
                loadingStatusSpan.classList.add('text-red-500');
            });
        };

        // Function to listen for user profile data
        const listenForUserProfiles = () => {
             if (!isAuthReady) {
                console.log('Auth not ready, skipping listenForUserProfiles');
                return;
            }
            const collectionPath = `artifacts/${appId}/public/data/user-profiles`;
            onSnapshot(collection(db, collectionPath), (querySnapshot) => {
                allUserProfiles = [];
                querySnapshot.forEach((doc) => {
                    allUserProfiles.push({ id: doc.id, ...doc.data() });
                });
                console.log('User profiles fetched:', allUserProfiles);
                // Update the user info form if the selected initial has a profile
                updateUserInfoForm(initialSelect.value);
            }, (error) => {
                console.error("Failed to fetch user profiles:", error);
            });
        };

        // Function to update the achievement name dropdown based on the selected body part
        const updateAchievementNameDropdown = (selectedBodyPart) => {
            achievementNameSelect.innerHTML = '<option value="">Select or add a workout</option>';
            const uniqueAchievementNames = new Set();
            
            // Filter achievements based on the selected body part
            const filteredAchievements = selectedBodyPart === ""
                ? allAchievements
                : allAchievements.filter(ach => ach.bodyPart === selectedBodyPart);

            filteredAchievements.forEach(ach => {
                if (ach.name) {
                    uniqueAchievementNames.add(ach.name);
                }
            });

            const sortedNames = Array.from(uniqueAchievementNames).sort();
            
            sortedNames.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                option.textContent = name;
                achievementNameSelect.appendChild(option);
            });
            
            // Always add the "New Workout" option last
            const newOption = document.createElement('option');
            newOption.value = 'new';
            newOption.textContent = 'New Workout';
            achievementNameSelect.appendChild(newOption);
        };
        
        // Function to update the achievement type dropdown based on the selected body part
        const updateWorkoutTypeDropdown = (selectedBodyPart) => {
            isCardio = selectedBodyPart === 'Cardio';
            achievementTypeSelect.innerHTML = '';
            
            const options = [
                { value: "", text: "Select type" },
                { value: isCardio ? "pb" : "1rm", text: isCardio ? "Personal Best" : "One Rep Max" },
                { value: "10rm", text: "10 Rep Max" },
                { value: "current", text: "Current Workout" }
            ];
            
            options.forEach(optionData => {
                const option = document.createElement('option');
                option.value = optionData.value;
                option.textContent = optionData.text;
                achievementTypeSelect.appendChild(option);
            });
            
            // Update the placeholder for the workout data input field
            if (isCardio) {
                workoutDataInput.placeholder = "e.g., 5km, 25min 45sec";
            } else {
                workoutDataInput.placeholder = "e.g., 225kg";
            }
        };

        // Function to filter and render achievements based on the two separate filters
        const filterAndRenderAchievements = () => {
            let filteredAchievements = allAchievements;

            // First, filter by initials if a filter is selected
            if (currentInitialFilter !== 'all') {
                filteredAchievements = filteredAchievements.filter(ach => ach.initial === currentInitialFilter);
            }

            // Then, filter by body part on the already filtered list
            if (currentBodyPartFilter !== 'all') {
                filteredAchievements = filteredAchievements.filter(ach => ach.bodyPart === currentBodyPartFilter);
            }
            
            renderAchievements(filteredAchievements);
        };

        // Function to render achievements on the page
        const renderAchievements = (achievements) => {
            console.log('Rendering', achievements.length, 'achievements');
            achievementList.innerHTML = '';
            
            if (achievements.length === 0) {
                emptyState.style.display = 'block';
                return;
            }
            emptyState.style.display = 'none';

            // Group achievements by name to find the latest PB, 10RM, and Current for each initial
            const groupedAchievements = achievements.reduce((acc, ach) => {
                const key = ach.name;
                
                if (!acc[key]) {
                    acc[key] = {
                        name: ach.name,
                        bodyPart: ach.bodyPart,
                        J: { tenRM: null, oneRM: null, current: null, pb: null },
                        H: { tenRM: null, oneRM: null, current: null, pb: null },
                        'J & H': { current: null }
                    };
                }

                // Handle the special 'J & H' combined workout
                if (ach.initial === 'J & H' && ach.type === 'current') {
                     if (!acc[key]['J & H'].current || ach.timestamp > acc[key]['J & H'].current.timestamp) {
                        acc[key]['J & H'].current = ach;
                    }
                } else {
                    // Store the latest entry for each type
                    const initialData = acc[key][ach.initial];
                    if (initialData) {
                         let typeKey;
                         if (ach.bodyPart === 'Cardio' && ach.type === 'pb') {
                            typeKey = 'pb';
                         } else if (ach.type === '10rm') {
                            typeKey = 'tenRM';
                         } else if (ach.type === '1rm') {
                            typeKey = 'oneRM';
                         } else {
                            typeKey = 'current';
                         }
                         if (!initialData[typeKey] || ach.timestamp > initialData[typeKey].timestamp) {
                            initialData[typeKey] = ach;
                         }
                    }
                }
                
                return acc;
            }, {});

            const achievementsToRender = Object.values(groupedAchievements);
            // Re-sort the final rendered list alphabetically by name
            achievementsToRender.sort((a, b) => a.name.localeCompare(b.name));

            achievementsToRender.forEach(ach => {
                const achievementCard = document.createElement('div');
                // All cards will now use the consistent green styling
                const cardClasses = ['flex', 'flex-col', 'sm:flex-row', 'items-start', 'sm:items-center', 'justify-between', 'p-6', 'rounded-2xl', 'shadow-md', 'transition', 'duration-300', 'hover:shadow-lg', 'border', 'border-solid', 'frosted-card', 'card-green'];
                achievementCard.classList.add(...cardClasses);

                let detailsHtml = '';
                let latestUpdate = null;
                let deleteId = null; // Helper variable to store the ID for the delete button

                // Helper function to create the display for a single initial
                const createInitialDetails = (initialData, initial) => {
                    // Collect all valid workout entries for this initial
                    const workoutEntries = [];
                    if (initialData.oneRM) workoutEntries.push(initialData.oneRM);
                    if (initialData.tenRM) workoutEntries.push(initialData.tenRM);
                    if (initialData.current) workoutEntries.push(initialData.current);
                    if (initialData.pb) workoutEntries.push(initialData.pb);

                    // If no entries, return early
                    if (workoutEntries.length === 0) return '';
                    
                    let html = `<div class="mb-4 sm:mb-0 w-full sm:w-1/2">`;
                    html += `<h4 class="text-sm font-bold text-[#8b949e] mb-2">${initial}'s Workouts</h4>`;
                    html += `<div class="flex flex-wrap gap-2">`;
                    
                    // Define color classes and display labels for each workout type
                    const typeStyles = {
                        '1rm': { class: 'bubble-1rm', label: '1 Rep Max' },
                        '10rm': { class: 'bubble-10rm', label: '10 Rep Max' },
                        'current': { class: 'bubble-current', label: 'Current Workout' },
                        'pb': { class: 'bubble-pb', label: 'Personal Best' }
                    };

                    workoutEntries.forEach(data => {
                        const style = typeStyles[data.type];
                        if (style) {
                             // Trim redundant rep information from the workout data
                             let displayWorkoutData = data.workoutData;
                             if (data.type === '10rm') {
                                displayWorkoutData = displayWorkoutData.replace(/,?\s?10 Reps?/i, '');
                             } else if (data.type === '1rm') {
                                displayWorkoutData = displayWorkoutData.replace(/,?\s?1 Rep?/i, '');
                             }

                            html += `
                                <div class="workout-bubble ${style.class} text-white text-xs px-3 py-1 text-center">
                                    <span class="font-bold whitespace-nowrap">${style.label}</span>
                                    <span class="text-sm font-medium whitespace-nowrap mt-1">${displayWorkoutData}</span>
                                </div>
                            `;

                            // Track the latest update for the delete button
                            if (!latestUpdate || data.timestamp > latestUpdate.timestamp) {
                                latestUpdate = data;
                                deleteId = data.id;
                            }
                        }
                    });
                    
                    html += `</div></div>`;
                    return html;
                };
                
                // Handle the special J & H case first
                if (ach['J & H'].current) {
                    const data = ach['J & H'].current;
                    detailsHtml = `
                        <div class="w-full">
                            <h4 class="text-sm font-bold text-[#8b949e] mb-2">J & H's Workout</h4>
                            <div class="flex flex-wrap gap-2">
                                <div class="workout-bubble bubble-current text-white text-xs px-3 py-1 text-center">
                                    <span class="font-bold whitespace-nowrap">Current Workout</span>
                                    <span class="text-sm font-medium whitespace-nowap mt-1">${data.workoutData}</span>
                                </div>
                            </div>
                        </div>
                    `;
                    latestUpdate = data;
                    deleteId = data.id;
                } else {
                    if (ach.J.oneRM || ach.J.tenRM || ach.J.current || ach.J.pb) {
                        detailsHtml += createInitialDetails(ach.J, 'J');
                    }
                    if (ach.H.oneRM || ach.H.tenRM || ach.H.current || ach.H.pb) {
                        detailsHtml += createInitialDetails(ach.H, 'H');
                    }
                }

                const updatedBy = latestUpdate?.initial;
                const updatedTime = latestUpdate ? new Date(latestUpdate.timestamp).toLocaleDateString() : 'N/A';

                // All text will now have the same green accent
                const textColorClass = 'text-green-accent';

                // Show delete button only if the workout belongs to the current user
                const showDeleteButton = currentUser && latestUpdate?.userId === currentUser.uid;
                // Show edit button only if the workout belongs to the current user
                const showEditButton = currentUser && latestUpdate?.userId === currentUser.uid;
                
                let cardContent = `
                    <div class="flex-grow w-full">
                        <h3 class="text-xl font-bold text-[#c9d1d9]">${ach.name}</h3>
                        <p class="text-sm text-[#8b949e] mt-1">${ach.bodyPart}</p>
                        <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mt-4">
                            ${detailsHtml}
                        </div>
                        <p class="text-xs text-[#8b949e] mt-4">Last updated by: <span class="font-semibold ${textColorClass}">${updatedBy}</span> on ${updatedTime}</p>
                    </div>
                    <div class="flex items-center space-x-2 mt-4 sm:mt-0">
                        ${showEditButton ? `
                            <button class="edit-btn px-4 py-2 text-sm font-medium bg-blue-800 text-blue-300 rounded-lg hover:bg-blue-700 transition" data-id="${latestUpdate.id}">
                                Edit
                            </button>
                        ` : ''}
                        ${showDeleteButton ? `
                            <button class="delete-btn px-4 py-2 text-sm font-medium bg-red-800 text-red-300 rounded-lg hover:bg-red-700 transition" data-id="${deleteId}">
                                Delete
                            </button>
                        ` : ''}
                    </div>
                `;

                achievementCard.innerHTML = cardContent;
                achievementList.appendChild(achievementCard);

                // Add event listeners for delete and edit buttons after rendering
                const deleteButton = achievementCard.querySelector('.delete-btn');
                if (deleteButton) {
                    deleteButton.addEventListener('click', async (e) => {
                        const achievementId = e.target.dataset.id;
                        if (isAuthReady && currentUser) {
                            showModal(`Are you sure you want to delete this workout?`, async () => {
                                try {
                                    const collectionPath = `artifacts/${appId}/public/data/gym-achievements`;
                                    await deleteDoc(doc(db, collectionPath, achievementId));
                                    console.log('Document successfully deleted!');
                                } catch (error) {
                                    console.error('Error removing document: ', error);
                                }
                            });
                        }
                    });
                }
                
                const editButton = achievementCard.querySelector('.edit-btn');
                if (editButton) {
                    editButton.addEventListener('click', (e) => {
                        const achievementId = e.target.dataset.id;
                        editWorkout(achievementId);
                    });
                }
            });
        };

        // Function to handle editing an existing workout
        const editWorkout = (id) => {
            const workoutToEdit = allAchievements.find(ach => ach.id === id);
            if (!workoutToEdit) {
                console.error('Workout to edit not found.');
                return;
            }

            editingDocId = id;

            // Populate the form with the workout data
            initialSelect.value = workoutToEdit.initial;
            bodyPartSelect.value = workoutToEdit.bodyPart;
            
            // Wait for the achievement name dropdown to be updated before setting its value
            setTimeout(() => {
                achievementNameSelect.value = workoutToEdit.name;
                // If it's a new workout name that isn't in the list yet, show the input field
                if (!achievementNameSelect.querySelector(`option[value="${workoutToEdit.name}"]`)) {
                    achievementNameSelect.value = 'new';
                    newAchievementNameInput.style.display = 'block';
                    newAchievementNameInput.value = workoutToEdit.name;
                }
            }, 100);

            achievementTypeSelect.value = workoutToEdit.type;
            workoutDataInput.value = workoutToEdit.workoutData;
            
            // Change button text and show cancel button
            submitButton.textContent = 'Save Changes';
            cancelButton.classList.remove('hidden');
        };

        // Function to reset the form state
        const resetForm = () => {
            editingDocId = null;
            achievementForm.reset();
            submitButton.textContent = 'Add Workout';
            cancelButton.classList.add('hidden');
            newAchievementNameInput.style.display = 'none';
            newAchievementNameInput.value = '';
            bodyPartSelect.dispatchEvent(new Event('change'));
        };

        // --- NEW USER INFO FUNCTIONS ---
        // Function to update the user info form fields
        const updateUserInfoForm = (initial) => {
            // Hide the section by default
            userInfoSection.classList.add('hidden');
            if (initial === 'J' || initial === 'H') {
                userInfoSection.classList.remove('hidden');
                const profile = allUserProfiles.find(p => p.initial === initial);
                if (profile) {
                    userWeightInput.value = profile.weight || '';
                    userHeightInput.value = profile.height || '';
                    calculateBMI();
                } else {
                    userInfoForm.reset();
                    bmiResultSpan.textContent = '--';
                }
            } else {
                userInfoForm.reset();
                bmiResultSpan.textContent = '--';
            }
        };

        // Function to calculate and display BMI
        const calculateBMI = () => {
            const weight = parseFloat(userWeightInput.value);
            const height = parseFloat(userHeightInput.value);

            if (weight > 0 && height > 0) {
                const heightInMeters = height / 100;
                const bmi = weight / (heightInMeters * heightInMeters);
                bmiResultSpan.textContent = bmi.toFixed(2);
            } else {
                bmiResultSpan.textContent = '--';
            }
        };
        
        // --- EVENT LISTENERS ---
        // Handle form submission (add or update)
        achievementForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!isAuthReady || !currentUser) {
                showModal("Please wait for the app to connect.", () => {}, false);
                return;
            }
            
            selectedInitial = initialSelect.value;
            const bodyPart = bodyPartSelect.value;
            let achievementName = achievementNameSelect.value;
            const achievementType = achievementTypeSelect.value;
            const workoutData = workoutDataInput.value;

            // If "New Workout" is selected, use the input field value
            if (achievementName === 'new') {
                achievementName = newAchievementNameInput.value.trim();
                if (!achievementName) {
                    showModal("Please enter a title for the new workout.", () => {}, false);
                    return;
                }
            }

            if (!selectedInitial || !bodyPart || !achievementName || !achievementType || !workoutData) {
                showModal("Please fill out all the fields.", () => {}, false);
                return;
            }

            const workoutDataPayload = {
                initial: selectedInitial,
                bodyPart: bodyPart,
                name: achievementName,
                type: achievementType,
                workoutData: workoutData,
                timestamp: Date.now(),
                userId: currentUser.uid // Store the user ID for ownership checks
            };

            const collectionPath = `artifacts/${appId}/public/data/gym-achievements`;

            submitButton.disabled = true;
            submitButton.textContent = 'Saving...';

            try {
                if (editingDocId) {
                    // Update existing document
                    const docRef = doc(db, collectionPath, editingDocId);
                    await updateDoc(docRef, workoutDataPayload);
                    console.log("Document successfully updated!");
                    showModal("Workout successfully updated!", () => {}, false);
                } else {
                    // Add new document
                    await addDoc(collection(db, collectionPath), workoutDataPayload);
                    console.log("Document successfully added!");
                    showModal("Workout successfully added!", () => {}, false);
                }
            } catch (e) {
                console.error("Error adding/updating document: ", e);
                showModal("Error saving workout. See console for details.", () => {}, false);
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'Add Workout';
                resetForm();
            }
        });

        // Handle user info form submission
        userInfoForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!isAuthReady || !currentUser) {
                showModal("Please wait for the app to connect.", () => {}, false);
                return;
            }

            const selectedInitial = initialSelect.value;
            const userWeight = parseFloat(userWeightInput.value);
            const userHeight = parseFloat(userHeightInput.value);
            
            if (!userWeight || !userHeight || (selectedInitial !== 'J' && selectedInitial !== 'H')) {
                showModal("Please fill out all fields and select J or H.", () => {}, false);
                return;
            }

            const userProfilePayload = {
                initial: selectedInitial,
                weight: userWeight,
                height: userHeight,
                timestamp: Date.now(),
                userId: currentUser.uid // Store the user ID for ownership checks
            };

            try {
                const docRef = doc(db, `artifacts/${appId}/public/data/user-profiles`, selectedInitial);
                await setDoc(docRef, userProfilePayload);
                console.log("User profile successfully saved!");
                showModal("User profile updated!", () => {}, false);
            } catch (e) {
                console.error("Error saving user profile: ", e);
                showModal("Error saving user profile. See console for details.", () => {}, false);
            }
        });

        // Handle bodyPart dropdown change to update the workout name dropdown
        bodyPartSelect.addEventListener('change', (e) => {
            const selectedBodyPart = e.target.value;
            updateAchievementNameDropdown(selectedBodyPart);
            updateWorkoutTypeDropdown(selectedBodyPart);
        });

        // Handle achievementName dropdown change to show/hide the new workout input
        achievementNameSelect.addEventListener('change', (e) => {
            if (e.target.value === 'new') {
                newAchievementNameInput.style.display = 'block';
            } else {
                newAchievementNameInput.style.display = 'none';
            }
        });

        // Handle initial dropdown change to show/hide user info section
        initialSelect.addEventListener('change', (e) => {
            updateUserInfoForm(e.target.value);
        });
        
        // Listen for changes in the user weight and height fields to update BMI
        userWeightInput.addEventListener('input', calculateBMI);
        userHeightInput.addEventListener('input', calculateBMI);
        
        // Handle filter dropdown changes
        initialsFilter.addEventListener('change', (e) => {
            currentInitialFilter = e.target.value;
            filterAndRenderAchievements();
        });

        bodyPartFilter.addEventListener('change', (e) => {
            currentBodyPartFilter = e.target.value;
            filterAndRenderAchievements();
        });

        // Handle clear filters button click
        clearFiltersButton.addEventListener('click', () => {
            initialsFilter.value = 'all';
            bodyPartFilter.value = 'all';
            currentInitialFilter = 'all';
            currentBodyPartFilter = 'all';
            filterAndRenderAchievements();
        });

        // Handle cancel button click
        cancelButton.addEventListener('click', resetForm);

        // --- MODAL FUNCTIONS ---
        // Function to show the custom modal
        const showModal = (message, onConfirm, isConfirm = true) => {
            alertMessage.textContent = message;
            alertModal.style.display = 'flex';
            if (isConfirm) {
                modalConfirmBtn.classList.remove('hidden');
                modalConfirmBtn.onclick = () => {
                    onConfirm();
                    alertModal.style.display = 'none';
                };
                modalCancelBtn.onclick = () => {
                    alertModal.style.display = 'none';
                };
            } else {
                modalConfirmBtn.classList.add('hidden');
                modalCancelBtn.onclick = () => {
                    alertModal.style.display = 'none';
                };
            }
        };

        // Close the modal when the user clicks on (x) or outside the modal
        modalCloseBtn.onclick = () => {
            alertModal.style.display = 'none';
        };
        window.onclick = (event) => {
            if (event.target === alertModal) {
                alertModal.style.display = 'none';
            }
        };
    </script>
</body>
</html>
